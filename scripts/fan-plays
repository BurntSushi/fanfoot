#!/usr/bin/env python2

import argparse
import sys

from termcolor import colored

import nflgame.live

import fanfoot

parser = argparse.ArgumentParser(
    description='Watch live games and echo plays involving one of your '
                'players to stdout. The rosters used will always be from '
                'the current week.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
aa = parser.add_argument
aa('league_teams', type=str, nargs='+',
   help='A list of league labels and team name/ids. Each item in the list '
        'should be the league label concaenated with a team id or name '
        'by a colon. Valid examples (including quotes): '
        '"espn:Langdon Algers", "espn:2", "keeper:Langdon Algers", etc.')
conf = parser.parse_args()


db = fanfoot.db()
cur_week = db.get_week()

tracking = []
for league_team in conf.league_teams:
    try:
        league_label, team_name_or_id = league_team.split(':')
    except ValueError:
        print >> sys.stderr, 'Could not parse "%s".' % league_team
        sys.exit(1)

    try:
        lgconf = fanfoot.find(league_label)
    except KeyError:
        print >> sys.stderr, 'Could not find league with label "%s".' \
                             % league_label
        sys.exit(1)

    team = db.find_team(lgconf, team_name_or_id)
    if not team:
        print >> sys.stderr, 'Could not find team "%s" in league %s.' \
                             % (team_name_or_id, lgconf.label)
        sys.exit(1)
    if len(team) > 1:
        hits = [str(t.name) for t in team]
        print >> sys.stderr, 'Found too many hits for team "%s" in league %s: %s' \
                             % (team_name_or_id, lgconf.label, hits)
        sys.exit(1)
    team = team[0]

    tracking.append((lgconf, team, db.roster(lgconf, cur_week, team.id)))

def highlighted(txt):
    return colored(txt, 'white', on_color='on_red')

def get_game(eid, games):
    for g in games:
        if g.eid == eid:
            return g
    return None

def play_has_player(play):
    for lgconf, team, roster in tracking:
        for player in roster:
            if play.players.playerid(player.player.playerid) != None:
                return True
    return False

last_games = []
def cb(active, completed):
    global last_games

    for game in active + completed:
        print game.time, game.nice_score()
        last = get_game(game.eid, last_games)
        if last is not None:
            diff = game - last
            for p in diff.plays:
                pstr = '%d and %d: %s' % (p.down, p.yards_togo, p)
                if play_has_player(p):
                    print '\t%s' % highlighted(pstr)
                else:
                    print '\t', pstr
    last_games = active + completed

    print '-' * 45

nflgame.live.run(cb)
